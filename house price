# -*- coding: utf-8 -*-
"""
Created on Sun Jan 13 21:22:11 2019

@author: chaitu
"""


import pandas as pd
import numpy as np
import matplotlib.pyplot as plt 

dataset1 =pd.read_csv('test.csv')
dataset2=pd.read_csv('train.csv')
dataset2=dataset2[dataset2.GrLivArea<4500]
answer=dataset2.iloc[:,80]
dataset2=dataset2.drop('SalePrice',axis=1)
dataset2=dataset2.append(dataset1)
for i in dataset2.columns:
    data=dataset2[i].values
    data=data[0:1458]
    plt.scatter(data,answer)
    plt.show()
fake=dataset2.isnull().sum().sort_values()
fake=fake[fake>0]
dataset2=dataset2.drop(['PoolQC','MiscFeature','Alley','Fence','Id'],axis=1)

fake=fake.drop(['PoolQC','MiscFeature','Alley','Fence'])


for i in (fake.index):
    if i not in (['GarageArea','TotalBsmtSF','BsmtFinSF2','BsmtFinSF1','MasVrArea','GarageYrBlt','LotFrontage']):
     dataset2[i]=dataset2[i].fillna(dataset2[i].mode().iloc[0])

for i in (fake.index):
    if i in (['GarageArea','TotalBsmtSF','BsmtFinSF2','BsmtFinSF1','MasVrArea','GarageYrBlt','LotFrontage']):
     dataset2[i]=dataset2[i].fillna(dataset2[i].median())
answer=pd.concat([answer,np.log(answer + 1)],axis=1)
answer=answer.iloc[:,1].values
dataset3=pd.get_dummies(dataset2).reset_index(drop=True)
from sklearn.preprocessing import StandardScaler
sc_X = StandardScaler()
dataset3=sc_X.fit_transform(dataset3)
r = StandardScaler()
answer=r.fit_transform(answer.reshape(-1,1))
train=dataset3[:1458,:]
test=dataset3[1458:,:]


from sklearn.cross_validation import train_test_split
xtrain, xtest, ytrain, ytest = train_test_split(train,answer, test_size = 0.20)



from sklearn import linear_model as lm
from sklearn.metrics import mean_squared_error
clas=lm.Ridge(alpha=11)
clas.fit(xtrain,ytrain)
ypred=clas.predict(xtest)
mean_squared_error(ytest,ypred)
ans=clas.predict(test)
ans=r.inverse_transform(ans)
ans1=ans
ans1=np.floor(np.expm1(ans1))
from sklearn.model_selection import cross_val_score
auc=cross_val_score(estimator=clas,X=xtrain,y=ytrain,cv=10)
auc.mean()
auc.std()

from sklearn.model_selection import GridSearchCV
alpha=range(1,20,1)
par={'alpha':alpha}
cal=GridSearchCV(clas,par,cv=5)
cal.fit(xtrain,ytrain)



